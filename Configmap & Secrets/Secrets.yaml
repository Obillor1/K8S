# kubectl create secret generic db-data --from-literal=mysql_root_password=password --from-literal=mysql_db_name=obillor1 --from-literal=mysql_user=admin --from-literal=mysql_user_passwd=password   (This would create secrets in an imperative mode)


apiVersion: v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: database
    type: mysql
    environment: production

spec:
  selector:
    matchLabels:
      environment: production
  template:
    metadata:
      name: mysql-demo
      labels:
        app: nginx
        environment: production
        release: v1.0
    spec:
      containers:
        - name: mysql
          image: mysql 
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql_root_password
                  name: db-data  #name of secrets
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: mysql_db_name
                  name: db-data  #name of secrets
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: mysql_user
                  name: db-data
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql_user_passwd
                  name: db-data
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/html    #Directory to mount in the volume
              name: shared-data
      volumes:
        - name: shared-data
          emptyDir: {}
      





OR:
kubectl create secret generic db-data --from-literal=MYSQL_ROOT_PASSWORD=password --from-literal=MYSQL_DATABASE=obillor1 --from-literal=MYSQL_USER=admin --from-literal=MYSQL_PASSWORD=password   (This would create secrets in an imperative mode)


apiVersion: v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: database
    type: mysql
    environment: production

spec:
  selector:
    matchLabels:
      environment: production
  template:
    metadata:
      name: mysql-demo
      labels:
        app: nginx
        environment: production
        release: v1.0
    spec:
      containers:
        - name: mysql
          image: mysql:9.01
          envFrom:
            - secretRef:
                name: db-data
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/html    #Directory to mount in the volume
              name: shared-data
      volumes:
        - name: shared-data
          emptyDir: {}


---
#You can also mount secrets as files in a container

#kubectl create secret generic db-data --from-literal=mysql_root_password=password --from-literal=mysql_db_name=obillor1 --from-literal=mysql_user=admin --from-literal=mysql_user_passwd=password


apiVersion: v1
kind: Pod
metadata:
  name: alpine-demo
spec:
  containers:
    - name: demo
      image: alpine
      command:
        - ls 
        - "-l"
        - "/var/tmp"
      volumeMounts:
        - mountPath: "/var/tmp"
          name: db-files
          readOnly: true
  volumes:
    - name: db-files
      secret:
        secretName: db-data
  restartPolicy: Never



#kubectl create secret docker-registry osodec --docker-server='https://index.docker.io/v1/' --docker-email=obilloro@gmail.com --docker-password=token_name_created_in_docker_hub --docker-username=obillor1 (Creating secrets with docker-registry)

apiVersion: v1
kind: Pod
metadata:
  name: alpine-demo
spec:
  imagePullSecrets:
    - name: osodec #This is run by running kubectl get secret osodec -o yaml and checking the metadata name.
  containers:
    - name: demo
      image: obillor1/test
      imagePullPolicy: Always #Never, IfNotPresent
      command: ["/bin/bash"]
      args: ["-c", "sleep 222"]



